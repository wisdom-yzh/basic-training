#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size() == 0) {
            return 0;
        }
        const int ROW = grid.size();
        const int COL = grid[0].size();
        int islands = 0;
        
        for (int y = 0; y < ROW; y++) {
            for (int x = 0; x < COL; x++) {
                if (grid[y][x] == '1') {
                    queue<pair<int, int>> q;
                    q.push(make_pair(y, x));
                    while (!q.empty()) {
                        pair<int, int> &point = q.front();
                        int py = point.first;
                        int px = point.second;
                        if (py > 0 && grid[py - 1][px] == '1') {
                            q.push(make_pair(py - 1, px));
                            grid[py - 1][px] = '2';
                        }
                        if (py < ROW - 1 && grid[py + 1][px] == '1') {
                            q.push(make_pair(py + 1, px));
                            grid[py + 1][px] = '2';
                        }
                        if (px > 0 && grid[py][px - 1] == '1') {
                            q.push(make_pair(py, px - 1));
                            grid[py][px - 1] = '2';
                        }
                        if (px < COL - 1 && grid[py][px + 1] == '1') {
                            q.push(make_pair(py, px + 1));
                            grid[py][px + 1] = '2';
                        }
                        q.pop();
                    }
                    islands++;
                }
            }
        }

        return islands;
    }
};

int main() {
    vector<vector<char>> grid {
        {'1','1','1','1','0'},
        {'1','1','0','1','0'},
        {'1','1','0','0','0'},
        {'0','0','0','0','0'}
    };
    cout << Solution().numIslands(grid);
    vector<vector<char>> grid2 {
        {'1','1','0','0','0'},
        {'1','1','0','0','0'},
        {'0','0','1','0','0'},
        {'0','0','0','1','1'}
    };
    cout << Solution().numIslands(grid2);
    vector<vector<char>> grid3 {
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
    };
    cout << Solution().numIslands(grid3);

    return 0;
}
